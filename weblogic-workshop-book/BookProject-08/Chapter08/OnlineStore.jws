package Chapter08;

import weblogic.jws.control.JwsContext;
import java.util.ArrayList;
import com.onlinestore.item.Item;

/**
 * Represents an online store web service. The service features a means to 
 * interact with a shopping cart and to purchase items placed in the cart.
 * 
 * This is a "conversational" web service, in which asynchronous communication 
 * is supported by correlating each request with the client making 
 * the request. Methods participating in the converation are marked with 
 * an @jws:conversation annotation. These provide the logic behind
 * web service operations. 
 */
public class OnlineStore
{

    public Callback callback;

    /**
     * Represents callbacks from this web service.
     */
    public interface Callback
    {
        /**
         * A callback function for notifying the client
         * whether their transaction has been approved.
         * 
         * This function finishes the conversation begun
         * with the {startShoppping} method. When the conversation
         * finishes, the server releases state and the conversation
         * ID that was used to correlate requests from a given
         * client.
         * 
         * @jws:conversation phase="finish"
         */
        public void onPurchaseApproved(String message, 
            Item[] itemsPurchased);
    }

    /**
     * An instance of the JMS control that sends credit check requests to 
     * the Java Message Service (JMS).
     * 
     * @jws:control
     */
    private CreditCheckControl creditCheckJMS;

    /**
     * An instance of the EJB control that sends a request for inventory
     * to an EJB entity bean.
     * 
     * @jws:control
     */
    private InventoryControl inventoryEJB;
    
    /* @jws:context */ 
    JwsContext context; 
    
    /** The name of the customer. */
    private String name;
    
    /* A list of items that represents the shopping 
     * cart. */
    private ArrayList shoppingCart;
    
    /* A variable to hold the item list received from 
     * the inventory bean. */
    private Item[] catalog;

    /* The customer's ID, to be used when requesting 
     * credit approval. */    
    private String customerID;

    /**
     * Begins the transaction by initializing a new shopping cart.
     * 
     * This method is annotated to start the conversation. A request to this
     * method prompts the server to begin tracking state for all conversational 
     * requests to this web services. The server also creates a conversation 
     * ID to correlate requests from a given client across a session
     * with this web service.
     * 
     * @param name The customer's name.
     * @parame customerNumber The customer's ID.
     * 
     * @jws:operation 
     * @jws:conversation phase="start"
     */
    public String startShopping(String name, String customerNumber)
    {
        this.customerID = customerNumber;
        this.name         = name;
        this.shoppingCart = new ArrayList();
        
        return "Welcome, " + name;
    }
    
    /** 
     * Retieves items in the catalog for browsing. These are the items that
     * the customer can add to their shopping cart. The array of items
     * is retrieved using an EJB control.
     * 
     * This method continues the conversation started with the {startShopping}
     * method. 
     * 
     * @return An array of items from the catalog.
     * 
     * @jws:operation
     * @jws:conversation phase="continue"
     */
    public Item[] viewCatalog() throws Exception
    {
        /* 
         * Handle RemoteException, which is thrown by EJB methods. 
         * If the exception is caught, send it, along with a 
         * message, to the client for handling. Also, 
         * RemoteRuntimeException must be caught for calls to 
         * EJB control methods.
         */
        try{
            /* 
             * Retrieve the list of available items from the 
             * inventory bean, then assign the list to a member
             * variable.
             */
            catalog = inventoryEJB.listItems();
        } catch (java.rmi.RemoteException re){
            throw new Exception("OnlineStore: There was a " +
            "problem getting the list of items.");
        } catch (weblogic.rmi.extensions.RemoteRuntimeException rre)
        {
            throw new Exception("OnlineStore: There was a " +
            "problem getting the list of items.");
        }
        /* Return the retrieved list to the client. */
        return catalog;
    }
    
    /**
     * Adds an item to the shopping cart.
     * 
     * @param code Identifier of the item to add to the shopping cart.
     * 
     * @jws:operation 
     * @jws:conversation phase="continue"
     */
    public void addItem(Integer code)
    {
        /* 
         * Use the list of items in the catalog to find and add a 
         * new item to the shopping cart.
         */
        shoppingCart.add(new Item(
            catalog[code.intValue()].getName(), 
            code, catalog[code.intValue()].getPrice())
        );
    }

    /**
     * Removes an item from the shopping cart.
     * 
     * @param index Index of the item to remove.
     * 
     * @jws:operation 
     * @jws:conversation phase="continue"
     */
    public void removeItem(int index)
    {
        /* 
         * Use the list of items in the catalog to find and 
         * remove an item from the shopping cart.
         */
        shoppingCart.remove(index);
    }
    
    /**
     * Retrieves a list of the items currently in the shopping cart.
     * 
     * @return An array of the items in the cart.
     * 
     * @jws:operation
     * @jws:conversation phase="continue"
     */
    public Item[] viewCart()
    {
        /* 
         * Convert the ArrayList that is the shopping cart into 
         * an array of Item objects for return to the client.
         */
        return (Item[])shoppingCart.toArray(new Item[0]);
    }

    /**
     * Performs a customer checkout by totaling the prices
     * of items in the shopping cart, then sending that value
     * for a "credit check" (simply checking to see if the total)
     * is below a static value in the CreditCheck bean.
     * 
     * This method uses the JMS control to send a approval request
     * to JMS, which will forward it to an EJB listening for a
     * request. The EJB processes the request, then sends its
     * response back to JMS, which forwards it to the 
     * {creditCheckJMS_onApprovalReceived} callback.
     * 
     * @jws:operation
     * @jws:conversation phase="continue"
     */
    public void checkout()
    {
        /* Add the prices of items in the shopping cart. */
        double total = 0.00;
        
        for (int i = 0; i < shoppingCart.size(); i++) {
            total += (
            (Item)shoppingCart.get(i)).getPrice().doubleValue();
        }
        /* 
         * Send the total price and the customer's ID to the credit 
         * application for approval. The response will be received 
         * in the JMS control callback.
         */
        creditCheckJMS.getApproval(total, customerID);
    }

    /**
     * A function to receive a callback from the JMS control. The 
     * <controlName>_<callbackName> naming convention ensures that the callback
     * will be routed to this function.
     * 
     * @param isApproved true if the purchase is approved; otherwise, false.
     */
    private void creditCheckJMS_onApprovalReceived(boolean isApproved)
    {
        /* 
         * If the customer's purchase is not approved, respond with a 
         * polite message through the onPurchaseApproved callback. Otherwise, 
         * respond with a "Thank you" message and the list of items 
         * they purchased. 
         */
        if (!isApproved) {
            callback.onPurchaseApproved("We're sorry, but credit " +
            "was declined for your account number: " + 
            customerID, null);
        } else {
            callback.onPurchaseApproved("Thanks! Here's a list " +
            "of your purchases.", 
                (Item[])shoppingCart.toArray(new Item[0]));
        }
    }

}
