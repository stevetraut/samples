package Chapter11; 

import weblogic.jws.control.JwsContext;

/**
 * A web service that simply 
 */
public class POTranslator
{ 
    /** @jws:context */ 
    JwsContext context; 

    /**
     * A type to capture values to return to the client.
     */
    public static class PurchaseOrder
    {
        public PurchaseOrder() {}
        
        public String orderNumber;
        public Address shippingAddr;
        public Address billingAddr;
        public Item[] items;
    }

    /**
     * A type to capture address information from the client.
     */
    public static class Address
    {
        public Address() {}
     
        public String name;
        public String street;
        public String city;
        public String state;
        public String zip;
    }

    /**
     * A type to capture item information from the client.
     */
    public static class Item
    {
        public Item() {}
        
        public String name;
        public double price;
        public int quantity; 
    }

    /**
     * A web service operation to receive an order submission request. This 
     * method receives raw values and wraps them in XML to return to the client.
     * 
     * The sections within @jws:parameter-xml and @jws:return-xml annotations
     * below are XML maps -- special markup designed to reshape XML between
     * the shapes known to this operation and the shapes known to the client.
     * Here, both the incoming (parameter) and return maps call out to 
     * JavaScript in the POMaps.jsx file.
     * 
     * For example, incoming XML from the client is sent to a function in
     * POMaps.jsx, which extracts values and binds them to instances of 
     * Java types used in this method's arguments. The method's return
     * value is converted back to XML in a similar way.
     * 
     * @jws:operation
     * @jws:parameter-xml xml-map::
     *     <purchaseOrder xmlns="http://www.wiley.com/">
     *         {Chapter11.POMaps.translatePurchaseOrder(shippingAddr, billingAddr, poNumber, items)}
     *     </purchaseOrder>
     * ::
     * 
     * @jws:return-xml xml-map::
     *     <purchaseOrderReturn xmlns="http://www.wiley.com/">
     *         {Chapter11.POMaps.translatePurchaseOrder(return)}
     *     </purchaseOrderReturn>
     * ::
     */
    public PurchaseOrder submitOrder(Address shippingAddr, Address billingAddr, String poNumber, Item[] items)
    {
        /* 
         * Declare a PurchaseOrder variable and add to it the data from 
         * incoming parameter values. Note that the incoming data has 
         * been translated from the XML message sent by the client. 
         * The parameter XML map, along with the JavaScript function it 
         * calls, has parsed values from the XML message
         * into the Java parameters of this method.
         */
        PurchaseOrder po = new PurchaseOrder();

        po.shippingAddr = shippingAddr;
        po.billingAddr = billingAddr;
        po.items = items;
        po.orderNumber = poNumber;

        /* 
         * Return the new PurchaseOrder object. From here,
         * it will be translated via the return XML map and
         * the JavaScript function called by the map.
         */        
        return po;
    }
}
