package org.apache.beehive.netui.tools.doclet.taglets;

import com.sun.javadoc.*;
import com.sun.tools.doclets.Taglet;
import org.apache.beehive.netui.tools.doclet.jsptagref.JspTagContext;
import org.apache.beehive.netui.tools.doclet.jsptagref.JspTagDetail;
import org.apache.beehive.netui.tools.doclet.schema.LinkTargetType;
import org.apache.xmlbeans.XmlCursor;
import org.apache.xmlbeans.XmlObject;

import javax.xml.namespace.QName;
import java.util.Map;

/**
 * Represents doclet support for the &#64;see Javadoc tag. When the tag points to a
 * Java class, this doclet generates XML through which XSLT can create a link to
 * Javadoc output for the class (if the location of the output is known). If the
 * class happens to be a JSP tag handler class, then the resulting XML will also
 * include information through which XSLT can create a link to doc for the custom JSP
 * tag that the handler class provides logic for. In HTML output, links to classes
 * will automatically be converted to links to JSP tag topics if the -nolinkconversion
 * command-line option is not specified.
 * <p/>
 * For example, consider the following:
 * <p/>
 * &#64;see Foo Foo class
 * <p/>
 * The XML output generated by this taglet will be something like the following:
 * <pre>
 * &lt;sch:javadoc-tag name="see" head="See Also">
 *     &lt;sch:target inPackage="my.package" typeName="Foo" packagePath="http://openuri.org/mydocs/my/package/" tagUri="http://openuri.org" tagName="foo" uriPath="../../../openuri.org/" tagPrefix="mine">Foo class&lt;/sch:target>
 * &lt;/sch:javadoc-tag>
 * </pre>
 */
public class SeeTaglet extends SimpleXmlTaglet
{
    /**
     * Called by Javadoc to register this taglet, associating the taglet with
     * the tag it represents. This method will only be called by the standard
     * doclet (if the taglet is used with it).
     * 
     * @param tagletMap A map that associates the tag with its handler.
     */
    public static void register(Map tagletMap)
    {
        SeeTaglet taglet = new SeeTaglet();
        Taglet t = (Taglet) tagletMap.get(taglet.getName());
        if (t != null)
        {
            tagletMap.remove(taglet.getName());
        }
        tagletMap.put(taglet.getName(), taglet);
    }

    /**
     * Generates a container for the &lt;target> element that describes 
     * the destination this Javadoc tag links to. The {@link #generateTargetXml(Tag)}
     * method generates the rest of the element.
     * 
     * @param jvdTag The &#64;jsptagref.taglink Javadoc tag.
     * @return The &lt;target> element.
     */
    protected XmlObject generateContentXml(Tag jvdTag)
    {
        XmlObject xmlContent = XmlObject.Factory.newInstance();
        XmlCursor contentCursor = xmlContent.newCursor();
        contentCursor.toNextToken();
        contentCursor.beginElement(new QName(REF_NAMESPACE, "target"));
        contentCursor.toParent();
        XmlObject xmlTarget = contentCursor.getObject();
        LinkTargetType xmlTargetContent = generateTargetXml(jvdTag);
        xmlTarget.set(xmlTargetContent);
        contentCursor.dispose();
        return xmlContent;
    }

    /**
     * Generates the &lt;target> element that describes the destination 
     * this Javadoc tag links to. The {@link #generateContentXml(Tag)}
     * method generates a container for the element.
     * 
     * @param jvdTag The &#64;jsptagref.taglink Javadoc tag.
     * @return The contained portion of &lt;target> element.
     */
    protected LinkTargetType generateTargetXml(Tag jvdTag)
    {
        JspTagContext context = getContext();
        LinkTargetType xmlTarget = LinkTargetType.Factory.newInstance();
        SeeTag jvdSeeTag = (SeeTag) jvdTag;
        XmlCursor cursor = xmlTarget.newCursor();
        cursor.toFirstContentToken();
        String linkText = jvdTag.text();
        String label = jvdSeeTag.label();

        // The link is a simple href. The link text can include the @docRoot
        // tag, which signals that the href value should be regarded as relative
        // to the top of this Javadoc run.
        if (linkText.toLowerCase().startsWith("<a href"))
        {
            if (jvdTag.inlineTags().length > 0)
            {
                for (int k = 0; k < jvdTag.inlineTags().length; k++)
                {
                    generateInlineTagXml(jvdTag.inlineTags()[k], cursor,
                            context);
                }
            }
        }
        if (!linkText.toLowerCase().startsWith("<a href"))
        {
            // Isolate the tag values that will be used in the generated XML.
            PackageDoc jvdPackage = jvdSeeTag.referencedPackage();
            ClassDoc jvdReferencedType = jvdSeeTag.referencedClass();
            MemberDoc jvdMember = jvdSeeTag.referencedMember();
            String packageName = jvdPackage != null ? jvdPackage.name() : null;
            String typeName = jvdReferencedType != null ? jvdReferencedType
                    .name() : null;
            String inPackage = jvdReferencedType != null ? jvdReferencedType
                    .containingPackage().name() : packageName;
            String packagePath = jvdReferencedType != null ? getPackagePath(jvdReferencedType)
                    : null;
            String memberName = jvdMember != null ? jvdMember.name() : null;
            String signature = jvdMember != null ? createFlatSignature(jvdMember)
                    : null;
            if (packageName != null)
            {
                label = jvdSeeTag.label().equals("") ? packageName : jvdSeeTag
                        .label();
            }
            if (inPackage != null)
            {
                xmlTarget.setInPackage(inPackage);
            }
            if (typeName != null)
            {
                xmlTarget.setTypeName(typeName);
                label = jvdSeeTag.label().equals("") ? inPackage + '.'
                        + typeName : jvdSeeTag.label();
            }
            if (memberName != null)
            {
                xmlTarget.setMemberName(memberName);
            }
            if (signature != null)
            {
                xmlTarget.setSignature(signature);
                label = jvdSeeTag.label().equals("") ? inPackage + '.'
                        + typeName + '.' + memberName + signature : jvdSeeTag
                        .label();
            }
            if (packagePath != null)
            {
                xmlTarget.setPackagePath(packagePath);
            }
            if (context.getConfiguration().getNoLinkConversion()
                    .equals("false"))
            {
                if (jvdReferencedType != null)
                {
                    JspTagDetail jspTagDetail = context
                            .getTagDetailByHandler(jvdReferencedType
                                    .qualifiedName());

                    // If the class pointed at by this tag is a handler class,
                    // add JSP tag info.
                    if (jspTagDetail != null)
                    {
                        // Variables for the name and URI of the tag whose
                        // reference topic is being linked to (if any).
                        String jspTagName = "";
                        String jspTagUri = "";
                        if (jspTagDetail != null)
                        {
                            jspTagName = jspTagDetail.getTagName();
                            jspTagUri = jspTagDetail.getTagLibUri();
                            xmlTarget.setTagUri(jspTagUri);
                        }
                        String cleanUri = removeProtocolPrefix(jspTagUri);
                        xmlTarget.setTagName(jspTagName);
                        xmlTarget.setUriPath(buildDocRoot(jspTagUri) + '/'
                                + cleanUri + '/');
                        String tagPrefix = context.getTagDetailByTag(
                                jspTagName, jspTagUri).getTagPrefix();
                        xmlTarget.setTagPrefix(tagPrefix);
                    }
                }
            }
            // If this tag's value is "<a href...", just use the value as an
            // element value.
            label = label.equals("") ? jvdSeeTag.text() : label;
            cursor.toEndToken();
            cursor.insertChars(label);
        } else
        {
            cursor.toEndToken();
            cursor.insertChars(label);
        }
        cursor.dispose();
        return xmlTarget;
    }

    /**
     * Returns the full signature for a member link. For example, this will
     * return "getBundle(java.lang.String, java.util.Locale,
     * java.lang.ClassLoader)" instead of "getBundle(String, Locale,
     * ClassLoader)" or "getBundle".
     * 
     * @param jvdMember The member linked to by the Javadoc tag.
     * @return The full signature.
     */
    private static String createFullSignature(MemberDoc jvdMember)
    {
        String fullMemberName = "";
        if (jvdMember.isMethod())
        {
            fullMemberName = jvdMember.name()
                    + ((MethodDoc) jvdMember).signature();
        } else if (jvdMember.isField())
        {
            fullMemberName = ((FieldDoc) jvdMember).name();
        }
        return fullMemberName;
    }

    /**
     * Generates a flat signature (i.e., parameter names are not fully
     * qualified) from the member.
     * 
     * @param jvdMember The member whose signature should be generated.
     * @return The flat signature.
     */
    private static String createFlatSignature(MemberDoc jvdMember)
    {
        String flatSig = "";
        if (jvdMember.isMethod())
        {
            flatSig = jvdMember.name()
                    + ((MethodDoc) jvdMember).flatSignature();
        } else if (jvdMember.isField())
        {
            flatSig = ((FieldDoc) jvdMember).name();
        }
        return flatSig;
    }

    /**
     * Removes the protocol prefix from a URI, effectively converting the URI
     * into the uriPath value required for linking to JSP tag topics.
     * 
     * @param prefixedUri The URI to clean.
     * @return The cleaned URI.
     */
    public static String removeProtocolPrefix(String prefixedUri)
    {
        if (prefixedUri.startsWith("http://"))
        {
            prefixedUri = prefixedUri.replaceFirst("http://", "");
        } else if (prefixedUri.startsWith("file://"))
        {
            prefixedUri = prefixedUri.replaceFirst("file://", "");
        }
        return prefixedUri;
    }

    /**
     * Generate a path for linking to the class represented by <em>classDoc</em>.
     * 
     * @param jvdType The class or interface the link points to.
     * @return A path for linking.
     */
    private String getPackagePath(ClassDoc jvdType)
    {
        JspTagContext context = getContext();
        String packagePath = null;
        PackageDoc jvdContainingPackage = jvdType.containingPackage();
        if (jvdContainingPackage != null)
        {
            String packageName = jvdContainingPackage.name();
            if (context.isItemExternal(packageName))
            {
                packagePath = context.getExternalLinkPath(packageName);
                if (!context.isItemAbsolute(packageName))
                {
                    String currentJspUri = context.getCurrentTagDetail()
                            .getTagLibUri();
                    packagePath = buildDocRoot(currentJspUri) + '/' + packagePath;
                }
            }
        }
        return packagePath;
    }
}