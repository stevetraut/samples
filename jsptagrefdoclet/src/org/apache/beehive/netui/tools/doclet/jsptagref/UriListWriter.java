package org.apache.beehive.netui.tools.doclet.jsptagref;

import org.apache.beehive.netui.tools.doclet.schema.TaglibSummariesDocument;
import org.apache.beehive.netui.tools.doclet.schema.TaglibSummaryType;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;

/**
 * Used to write a uri-list file that lists the URIs for the
 * tag libraries included in the current Javadoc run. The file is written to the
 * root location specified by the user for writing output files.
 */
final class UriListWriter
{
    /**
     * Writes a uri-list file that lists URIs for the tag libraries represented
     * by <em>xmlTaglibOverviewDoc</em>, an XML overview of the libraries in
     * the current Javadoc run.
     *
     * @param xmlTaglibOverviewDoc An overview document generated by the doclet.
     * @param configuration        Configuration for this Javadoc run, including the
     *                             output path.
     */
    public static void writeUriList(TaglibSummariesDocument xmlTaglibOverviewDoc,
                                    ConfigurationJspTagDoc configuration)
    {
        TaglibSummaryType[] xmlTaglibSummaryArray =
                xmlTaglibOverviewDoc.getTaglibSummaries().getTaglibSummaryArray();
        StringBuffer uriBuffer = new StringBuffer();
        File uriList = null;
        for (int i = 0; i < xmlTaglibSummaryArray.length; i++)
        {
            TaglibSummaryType xmlTaglibSummary = xmlTaglibSummaryArray[i];
            String uri = xmlTaglibSummary.getUri().getStringValue();
            uriBuffer.append(uri + '\n');
        }
        try
        {
            if (configuration.isDestDirSpecified())
            {
                uriList = new File(configuration.getDestDir() + "/uri-list");
            } else
            {
                uriList = new File(configuration.getXmlDir() + "/uri-list");
            }
            if (uriList.exists())
            {
                uriList.delete();
            }
            boolean fileCreated = uriList.createNewFile();
            if (fileCreated)
            {
                FileOutputStream stream = new FileOutputStream(uriList);
                stream.write(uriBuffer.toString().getBytes());
            } else
            {
                configuration.getErrorReporter().printError("Error while saving " +
                        "the uri-list file: unable to create the file.");
            }
        } catch (FileNotFoundException fnfe)
        {
            configuration.getErrorReporter().printError(uriList.getPath() + ": Unable to locate " +
                    "the uri-list file: " + fnfe.getLocalizedMessage());
        } catch (IOException ioe)
        {
            configuration.getErrorReporter().printError(uriList.getPath() + ": Error while saving " +
                    "the uri-list file. \n" + ioe.getLocalizedMessage());
        }
    }
}
