package org.apache.beehive.netui.tools.doclet.taglets;

import com.sun.javadoc.Tag;
import com.sun.tools.doclets.Taglet;
import org.apache.beehive.netui.tools.doclet.schema.DescriptionType;
import org.apache.beehive.netui.tools.doclet.schema.TextAndTagsType;
import org.apache.xmlbeans.XmlCursor;
import org.apache.xmlbeans.XmlObject;

import javax.xml.namespace.QName;
import java.util.Map;

/**
 * Represents support for the @jsptagref.tagdescription Javadoc tag.
 * <p/>
 * The output XML generated by this taglet for a Javadoc tag such as
 * "@jsptagref.tagdescription Some text. Some more text." will be as follows:
 * <pre>
 * &lt;sch:javadoc-tag name="tagdescription" prefix="jsptagref" head="Description">
 *     &lt;sch:description>
 *         &lt;sch:lead>Some text.&lt;/sch:lead>
 *         &lt;sch:detail>Some text. Some more text..&lt;/sch:detail>
 *     &lt;/sch:description>
 * &lt;/sch:javadoc-tag>
 * </pre>
 */
public final class PrefixedDescriptionTaglet extends PrefixedTaglet
{
    /**
     * Called by Javadoc to register this taglet, associating
     * the taglet with the tag it represents. This method will only be called
     * by the standard doclet (if the taglet is used with it).
     *
     * @param tagletMap A map that associates the tag with its handler.
     */
    public static void register(Map tagletMap)
    {
        PrefixedDescriptionTaglet taglet = new PrefixedDescriptionTaglet();
        Taglet t = (Taglet) tagletMap.get(taglet.getName());
        if (t != null)
        {
            tagletMap.remove(taglet.getName());
        }
        tagletMap.put(taglet.getName(), taglet);
    }

    protected XmlObject generateContentXml(Tag jvdTag)
    {
        XmlObject xmlContent = XmlObject.Factory.newInstance();
        XmlCursor contentCursor = xmlContent.newCursor();
        contentCursor.toNextToken();

        // Create a container for the <description> element.
        contentCursor.beginElement(new QName(REF_NAMESPACE, "description"));
        contentCursor.toParent();
        XmlObject xmlDescription = contentCursor.getObject();
        contentCursor.toNextToken();

        // Create the contents of the <description> element.
        DescriptionType xmlDescriptionContent = DescriptionType.Factory.newInstance();
        TextAndTagsType xmlLeadDetail = xmlDescriptionContent.addNewLead();
        xmlLeadDetail.set(generateTextAndTagsXml(jvdTag.firstSentenceTags()));
        xmlLeadDetail = xmlDescriptionContent.addNewDetail();
        xmlLeadDetail.set(generateTextAndTagsXml(jvdTag.inlineTags()));

        // Put the contents into the container.
        xmlDescription.set(xmlDescriptionContent);
        return xmlContent;
    }
}
