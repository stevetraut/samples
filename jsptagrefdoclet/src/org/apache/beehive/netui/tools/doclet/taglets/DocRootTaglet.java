package org.apache.beehive.netui.tools.doclet.taglets;

import com.sun.javadoc.Tag;
import com.sun.tools.doclets.Taglet;
import org.apache.xmlbeans.XmlCursor;
import org.apache.xmlbeans.XmlObject;

import java.util.Map;

/**
 * Provides XML rendering for the @docRoot Javadoc tag. This
 * tag is used to represent a path to the root of the
 * output for the current Javadoc run. The docRoot path can be used
 * to build paths to other parts of the output when a path to the
 * destination relative to the output's root is known.
 * <p/>
 * In the doclet's XML output, the result of this taglet shows up
 * as its own &lt;javadoc-tag> element, like this:
 * <pre>
 *     &lt;sch:javadoc-tag name="docRoot">../../..&lt;/sch:javadoc-tag>
 * </pre>
 * For HTML output, this is transformed to include the element's
 * content only. Note that each &lt;jsp-tag>, &lt;function>, and
 * &lt;taglib-summary> element features a docRoot attribute whose
 * purpose is the same, but which is generated by the 
 * {@link org.apache.beehive.netui.tools.doclet.jsptagref.JavadocHandler#buildDocRoot(String)} 
 * method.
 */
public class DocRootTaglet extends SimpleXmlTaglet
{
    /**
     * Called by Javadoc to register this taglet, associating
     * the taglet with the tag it represents. This method will only be called
     * by the standard doclet (if the taglet is used with it).
     *
     * @param tagletMap A map that associates the tag with its handler.
     */
    public static void register(Map tagletMap)
    {
        DocRootTaglet taglet = new DocRootTaglet();
        Taglet t = (Taglet) tagletMap.get(taglet.getName());
        if (t != null)
        {
            tagletMap.remove(taglet.getName());
        }
        tagletMap.put(taglet.getName(), taglet);
    }

    /**
     * Generates the content of the XML for the @docRoot tag by
     * calling the {@link SimpleXmlTaglet#buildDocRoot(String)} method.
     * 
     * @param jvdTag Javadoc tag.
     * @return The &lt;content> element's content.
     */
    protected XmlObject generateContentXml(Tag jvdTag)
    {
        XmlObject xmlContent = XmlObject.Factory.newInstance();
        XmlCursor contentCursor = xmlContent.newCursor();
        contentCursor.toNextToken();
        contentCursor.insertChars(buildDocRoot(getContext().getCurrentTagDetail().getTagLibUri()));
        contentCursor.dispose();
        return xmlContent;
    }
}
